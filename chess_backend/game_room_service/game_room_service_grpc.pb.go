// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: game_room_service/game_room_service.proto

package game_room_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameRoomServiceClient is the client API for GameRoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameRoomServiceClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (GameRoomService_ConnectClient, error)
	SendMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error)
}

type gameRoomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameRoomServiceClient(cc grpc.ClientConnInterface) GameRoomServiceClient {
	return &gameRoomServiceClient{cc}
}

func (c *gameRoomServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (GameRoomService_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &GameRoomService_ServiceDesc.Streams[0], "/game_room_service.GameRoomService/connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &gameRoomServiceConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GameRoomService_ConnectClient interface {
	Recv() (*GameStateResponse, error)
	grpc.ClientStream
}

type gameRoomServiceConnectClient struct {
	grpc.ClientStream
}

func (x *gameRoomServiceConnectClient) Recv() (*GameStateResponse, error) {
	m := new(GameStateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gameRoomServiceClient) SendMove(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*MoveResponse, error) {
	out := new(MoveResponse)
	err := c.cc.Invoke(ctx, "/game_room_service.GameRoomService/sendMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameRoomServiceServer is the server API for GameRoomService service.
// All implementations must embed UnimplementedGameRoomServiceServer
// for forward compatibility
type GameRoomServiceServer interface {
	Connect(*ConnectRequest, GameRoomService_ConnectServer) error
	SendMove(context.Context, *MoveRequest) (*MoveResponse, error)
	mustEmbedUnimplementedGameRoomServiceServer()
}

// UnimplementedGameRoomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGameRoomServiceServer struct {
}

func (UnimplementedGameRoomServiceServer) Connect(*ConnectRequest, GameRoomService_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedGameRoomServiceServer) SendMove(context.Context, *MoveRequest) (*MoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMove not implemented")
}
func (UnimplementedGameRoomServiceServer) mustEmbedUnimplementedGameRoomServiceServer() {}

// UnsafeGameRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameRoomServiceServer will
// result in compilation errors.
type UnsafeGameRoomServiceServer interface {
	mustEmbedUnimplementedGameRoomServiceServer()
}

func RegisterGameRoomServiceServer(s grpc.ServiceRegistrar, srv GameRoomServiceServer) {
	s.RegisterService(&GameRoomService_ServiceDesc, srv)
}

func _GameRoomService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GameRoomServiceServer).Connect(m, &gameRoomServiceConnectServer{stream})
}

type GameRoomService_ConnectServer interface {
	Send(*GameStateResponse) error
	grpc.ServerStream
}

type gameRoomServiceConnectServer struct {
	grpc.ServerStream
}

func (x *gameRoomServiceConnectServer) Send(m *GameStateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GameRoomService_SendMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameRoomServiceServer).SendMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/game_room_service.GameRoomService/sendMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameRoomServiceServer).SendMove(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameRoomService_ServiceDesc is the grpc.ServiceDesc for GameRoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameRoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game_room_service.GameRoomService",
	HandlerType: (*GameRoomServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sendMove",
			Handler:    _GameRoomService_SendMove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "connect",
			Handler:       _GameRoomService_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "game_room_service/game_room_service.proto",
}
